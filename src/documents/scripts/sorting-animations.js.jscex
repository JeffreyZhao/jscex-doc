var SortingAnimations = function (canvas) {
    
    var ctx = canvas.getContext ? canvas.getContext("2d") : null;

    var randomArray = function () {
        var array = [];
        var length = Math.floor(canvas.width / 3);
        
        for (var i = 1; i < canvas.width / 3; i++) {
            array.push(i);
        }

        array.sort(function() { return (Math.round(Math.random()) - 0.5); });
        return array;
    }
    
    var paint = function (array) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        ctx.beginPath();

        for (var i = 0; i < array.length; i++)
        {
            var x = 2 + i * 3;
            var height = array[i] * 3 * canvas.height / canvas.width;
            
            ctx.moveTo(x, canvas.height);
            ctx.lineTo(x, canvas.height - height);
        }
        
        ctx.stroke();
    }
    
    var compareAsync = eval(Jscex.compile("async", function (x, y) {
        $await(Jscex.Async.sleep(10));
        return x - y;
    }));

    var swapAsync = eval(Jscex.compile("async", function (array, x, y) {
        var t = array[x];
        array[x] = array[y];
        array[y] = t;

        paint(array);

        $await(Jscex.Async.sleep(20));
    }));
    
    var partitionAsync = eval(Jscex.compile("async", function (array, begin, end) {
        var i = begin;
        var j = end;
        var pivot = array[Math.floor((begin + end) / 2)];

        while (i <= j) {
            while (true) {
                var r = $await(compareAsync(array[i], pivot));
                if (r < 0) { i++; } else { break; }
            }

            while (true) {
                var r = $await(compareAsync(array[j], pivot));
                if (r > 0) { j--; } else { break; }
            }

            if (i <= j) {
                $await(swapAsync(array, i, j));
                i++;
                j--;
            }
        }

	    return i;
    }));
    
    var quickSortAsync = eval(Jscex.compile("async", function (array, begin, end) {
        var index = $await(partitionAsync(array, begin, end));

        if (begin < index - 1) 
            $await(quickSortAsync(array, begin, index - 1));

        if (index < end) 
            $await(quickSortAsync(array, index, end));
    }));
    
    this.supported = !!ctx;
    this.randomArray = randomArray;
    this.paint = paint;
    
    this.quickSortAsync = eval(Jscex.compile("async", function (array) {
        $await(quickSortAsync(array, 0, array.length - 1));
    }));
};
